<?xml version="1.0"?>
<ruleset name="PepakrizPHPStanExceptionRules">
	<arg name="cache" value="tmp/cache/phpcs.json"/>

	<config name="installed_paths" value="../../slevomat/coding-standard,../../cdn77/coding-standard"/>

	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
	<rule ref="Generic.Classes.DuplicateClassName"/>
	<rule ref="Generic.CodeAnalysis.EmptyStatement">
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/><!-- empty catch statements are allowed when commented -->
	</rule>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.Commenting.Todo" />
	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.EndFileNewline"/>
	<rule ref="Generic.Files.InlineHTML"/>
	<rule ref="Generic.Files.LineEndings"/>
	<rule ref="Generic.Files.OneClassPerFile"/>
	<rule ref="Generic.Files.OneInterfacePerFile"/>
	<rule ref="Generic.Files.OneTraitPerFile"/>
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Generic.Functions.CallTimePassByReference"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.ForbiddenFunctions">
		<properties>
			<property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset,print=>echo,join=>implode,split=>explode,is_null=>null,create_function=>null"/>
		</properties>
	</rule>
	<rule ref="Generic.Strings.UnnecessaryStringConcat">
		<properties>
			<property name="allowMultiline" value="true"/>
		</properties>
	</rule>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="tabIndent" value="true"/>
		</properties>
	</rule>
	<rule ref="PEAR.Classes.ClassDeclaration"/>
	<rule ref="PEAR.Commenting.InlineComment"/>
	<rule ref="PEAR.Formatting.MultiLineAssignment"/>
	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>
	<rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace"/>
	<rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>
	<rule ref="PSR2">
		<exclude name="Generic.Files.LineLength"/><!-- can not be suppressed -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/><!-- don't check indentation with spaces -->
		<exclude name="PEAR.Functions.ValidDefaultValue"/><!-- we want to allow null as "default" value -->
		<exclude name="PSR2.Classes.ClassDeclaration"/><!-- we want whitespace around class body and rules for extends and implements, using PEAR instead -->
		<exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/><!-- we want to put first expression of multiline condition on next line -->
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.caseIndent"/><!-- checked by more generic Generic.WhiteSpace.ScopeIndent.Incorrect -->
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.defaultIndent"/><!-- checked by more generic Generic.WhiteSpace.ScopeIndent.Incorrect -->
		<exclude name="Squiz.Functions.LowercaseFunctionKeywords"/><!-- checked by more generic Generic.PHP.LowerCaseKeyword -->
		<exclude name="Squiz.ControlStructures.LowercaseDeclaration"/><!-- checked by more generic Generic.PHP.LowerCaseKeyword -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace"/><!-- clashes with OpeningFunctionBraceBsdAllman -->
		<exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/><!-- we want to allow empty line in control structure e.g. in catch blocks, where it can improve readability -->
		<exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpenBrace"/><!-- we want to put first expression of multiline condition on next line -->
		<exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/><!-- we want to allow empty line in control structure e.g. in try blocks, where it can improve readability -->
	</rule>
	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
	<rule ref="Squiz.Arrays.ArrayDeclaration">
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine"/><!-- does not handle wrapped content -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/><!-- expects closing brace at the same level as opening brace -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline"/><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline"/><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/><!-- uses indentation of only single space -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/><!-- even a single-value array can be written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/><!-- multiple values can be written on a single line -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/><!-- we don't want spacing with alignment -->
	</rule>
	<rule ref="Squiz.ControlStructures.InlineIfDeclaration">
		<exclude name="Squiz.ControlStructures.InlineIfDeclaration.NoBrackets"/>
		<exclude name="Squiz.ControlStructures.InlineIfDeclaration.NotSingleLine"/>
	</rule>
	<rule ref="Squiz.Classes.ClassFileName"/>
	<rule ref="Squiz.Classes.SelfMemberReference"/>
	<rule ref="Squiz.Commenting.DocCommentAlignment">
		<exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/><!-- space needed for indented annotations -->
	</rule>
	<rule ref="Squiz.Commenting.EmptyCatchComment"/>
	<rule ref="Squiz.Commenting.FunctionComment">
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/> <!-- we use params only when typehint is not possible -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/> <!-- we use params only when typehint is not possible -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/> <!-- we use params only when typehint is not possible -->
		<exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/> <!-- comment is not needed for throws phpdoc -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/><!-- requires long boolean and integer parameters -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/><!-- collection syntax such as string[] is not supported -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/><!-- enforces incorrect types -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/><!-- is not able to detect return types such as string|null as correct -->
		<exclude name="Squiz.Commenting.FunctionComment.Missing"/><!-- PHPDoc is not required on all methods -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/><!-- comments are not required for @param -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/><!-- void type is not used -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/><!-- comments don't have to be sentences -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/><!-- comments don't have to be sentences -->
		<exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/><!-- problematic when extending non-PHP7 classes -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/><!-- comments don't have to be sentences -->
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/><!-- comments don't have to be sentences -->
		<exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/><!-- doesn't work with self as typehint -->
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.InvalidThrows">
		<message>Exception type missing for @throws annotation</message>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.DuplicateReturn">
		<message>Only 1 @return annotation is allowed in a function comment</message>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.ExtraParamComment">
		<message>Extra @param annotation</message>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.InvalidNoReturn">
		<message>Function has no return statement, but annotation @return is present</message>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
		<message>@param annotation for parameter "%s" missing</message>
	</rule>
	<rule ref="Squiz.Functions.GlobalFunction"/>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Operators.IncrementDecrementUsage">
		<exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets"/><!-- afaik there is no need for brackets -->
	</rule>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.PHP.GlobalKeyword"/>
	<rule ref="Squiz.PHP.Heredoc"/>
	<rule ref="Squiz.PHP.InnerFunctions"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage">
		<exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/><!-- allow variable in double quoted strings -->
	</rule>
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
			<property name="spacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Strings.EchoedStrings"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
	<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.OperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
		<properties>
			<property name="ignoreBlankLines" value="false"/><!-- turned on by PSR2 -> turning off to be more general -->
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
		<severity>5</severity><!-- turned off by PSR2 -> turning on with default severity -->
	</rule>

	<rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
	<rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
	<rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>
	<rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
	<rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>
	<rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
	<rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
	<rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing"/>
	<rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
	<rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
		<properties>
			<property name="forbiddenAnnotations" type="array"
					  value="@author,@created,@version,@package,@copyright,@license,@see,@since,@link"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators" />
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch" />
	<rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessConditionWithReturn"/>
	<rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
	<rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
	<rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
	<rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
	<rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
		<properties>
			<property name="rootNamespaces" type="array" value="src=>Pepakriz\PHPStanExceptionRules,tests/src=>Pepakriz\PHPStanExceptionRules"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
		<properties>
			<property name="caseSensitive" value="false"/>
			<property name="psr12Compatible" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
	<rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
		<properties>
			<property name="searchAnnotations" type="bool" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
		<properties>
			<property name="allowFullyQualifiedGlobalFunctions" type="bool" value="false"/>
			<property name="allowFullyQualifiedNameForCollidingFunctions" type="bool" value="false"/>
			<property name="allowFallbackGlobalFunctions" type="bool" value="false"/>

			<property name="allowFullyQualifiedGlobalConstants" type="bool" value="false"/>
			<property name="allowFullyQualifiedNameForCollidingConstants" type="bool" value="false"/>
			<property name="allowFallbackGlobalConstants" type="bool" value="false"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>
	<rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
	<rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>
	<rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
	<rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<properties>
			<property name="newlinesCountBetweenOpenTagAndDeclare" value="0"/>
			<property name="newlinesCountAfterDeclare" value="2"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
	<rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
		<properties>
			<property name="usefulAnnotations" type="array" value="
				@throws,
				@dataProvider,
				@requires,
			"/>
			<property name="traversableTypeHints" type="array" value="
				Generator,
				Traversable,
			"/>
			<property name="enableEachParameterAndReturnInspection" value="1" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
	<rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
	<rule ref="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces"/>
	<rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
	<rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
	<rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

	<rule ref="Cdn77CodingStandard.Classes.ClassStructure"/>
	<rule ref="Cdn77CodingStandard.Classes.ClassUsesSeparately"/>
	<rule ref="Cdn77CodingStandard.TypeHints.NullTypeSpecifiedLast"/>
</ruleset>
